
// Simple reversible linear congruential random number generator.
class RandomStream {
    protected var a;
    protected var aprime;
    protected var m;
    protected var state;

    function initialize(seed, a, m, aprime) {
        self.a = a;
        self.aprime = aprime;
        self.m = m;
        self.state = seed.toLong();
    }

    function mix(value) {
        self.state += value;
    }

    function step() {
        self.state = (self.a*self.state)%self.m;
        return self.state;
    }

    function step_back() {
        var result = self.state;
        self.state = (self.aprime*self.state)%self.m;
        return result;
    }

    function randint(maxval, forward) {
        var state;
        if(forward) {
            state = self.step();
        }
        else {
            state = self.step_back();
        }

        // Remove the bias generated by the modulo operation, if
        // necessary, by taking the first N bits we need that wouldn't
        // take part in state%maxval below anyway. This doesn't work
        // if maxval is too large compared to m, but for this app that
        // is not the case.
        if(state >= self.m - self.m%maxval) {
            var test = maxval;
            while(test) {
                state = state >> 1;
                test = test >> 1;
            }
        }

        return state%maxval;
    }

    // Take good values from "Tables of Linear Congruential Generators
    // of Different Size and Good Lattice Structure," Pierre
    // L'Ecuyere, Mathematics of Computation,
    // 1999. https://doi.org/10.1090%2FS0025-5718-99-00996-5
    static function default_v1(seed) {
        return new RandomStream(seed, 1583458089, 2147483647, 1132489760);
    }
}
